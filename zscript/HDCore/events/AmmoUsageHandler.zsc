class HDCoreAmmoUsesHandler : EventHandler {

    // List of persistent classes to completely ignore.
    Array<name> thingBlacklist;

    // List of weapon-ammo associations.
    // Used for ammo-use association on ammo spawn (happens very often).
    Array<HDCoreSpawnAmmo> ammoSpawnList;

    bool initialized;

    HDCoreSpawnAmmo getAmmo(name ammoName) {
        HDCoreSpawnAmmo ammoSpawn;

        if (ammoSpawnList.size()) {
            forEach (ammo : ammoSpawnList) if (ammo.ammoName == ammoName) return ammo;
        }

        return null;
    }

    // appends an entry to ammoSpawnList;
    void addAmmo(HDCoreSpawnAmmo ammo) {

        if (hd_debug) {

            let msg = "Adding Ammo Association Entry for "..ammo.ammoName..": [";

            if (ammo.userNames.size()) forEach (userName : ammo.userNames) msg = msg..", "..userName;

            console.printF(msg.."]");
        }

        let existingAmmo = getAmmo(ammo.ammoName);

        // If we find an existing Ammo Association, simply merge the two lists
        if (existingAmmo) {
            existingAmmo.userNames.append(ammo.userNames);

            return;
        }

        // Otherwise, add the association to the registry
        ammoSpawnList.push(ammo);
    }

    void removeAmmo(name ammoName) {
        let ammo = getAmmo(ammoName);

        if (ammo) ammoSpawnList.delete(ammoSpawnList.find(ammo));
    }

    // appends an entry to ammoSpawnList;
    void addAmmoUser(name ammoName, name userName) {

        if (hd_debug) console.printF("Adding \""..userName.."\" to Ammo Association Entry for "..ammoName);
        
        let existingAmmo = getAmmo(ammoName);

        // If we find an existing Ammo Association, simply add the new entry
        if (existingAmmo) {

            existingAmmo.userNames.push(userName);

            return;
        }

        // OTherwise, create the association and add it to the registry
        let ammo = HDCoreSpawnAmmo.create(ammoName);
        ammo.userNames.push(userName);

        ammoSpawnList.push(ammo);
    }


    void init() {
        if (initialized) return;

        thingBlacklist.clear();
        ammoSpawnList.clear();

        let cmdReader = HDCoreInfoReader(StaticEventHandler.find('HDCoreInfoReader'));

        loadAmmoUses(cmdReader.commands);

        if (hd_debug) {
            console.printF("Configured Ammo Usage List:");
            forEach(ammo : ammoSpawnList) console.printF(ammo.toString());
        }

        initialized = true;
    }

    void loadAmmoUses(Array<HDCoreCommand> cmds) {
        forEach (cmd : cmds) {
            switch (cmd.command) {
                case 'addAmmoThingBlacklist': {
                    let name = cmd.getNameParam("name");

                    if (name) thingBlacklist.push(name);
                    break;
                }
                case 'newAmmo': {
                    let ammo = HDCoreSpawnAmmo.create(cmd.getNameParam("ammoName"));

                    if (ammo) addAmmo(ammo);
                    break;
                }
                case 'addAmmoUser': {
                    addAmmoUser(cmd.getNameParam("ammoName"), cmd.getNameParam("name"));

                    break;
                }
                case 'removeAmmo': {
                    removeAmmo(cmd.getNameParam("ammoName"));

                    break;
                }
                case 'removeAllAmmo': {
                    ammoSpawnList.clear();
                    break;
                }
                default:
                    break;
            }
        }
    }

    override void worldThingSpawned(WorldEvent e) {

        // Populates the main arrays if they haven't been already.
        if (!initialized) init();

        // If there are no configured ammo spawns, quit.
        if (!ammoSpawnList.size()) return;

        // If thing spawned doesn't exist, quit.
        if (!e.thing) return;

        // If thing spawned is blacklisted, quit.
        foreach (bl : thingBlacklist) if (e.thing is bl) return;

        // Pointers for specific classes.
        let ammo = HDAmmo(e.thing);

        // If the thing spawned is an ammunition, add any and all items that can use this.
        if (ammo) handleAmmoUses(ammo);
    }

    private void handleAmmoUses(HDAmmo ammo) {
        foreach (ammoSpawn : ammoSpawnList) {
            if (ammo.getClassName() == ammoSpawn.ammoName && ammoSpawn.userNames.size() > 0) {
                if (hd_debug) {
                    console.printF("Adding the following to the list of items that use "..ammo.getClassName().."");
                    foreach (weapon : ammoSpawn.userNames) console.printF(" * "..weapon);
                }

                forEach(userName : ammoSpawn.userNames) ammo.itemsThatUseThis.push(userName);
            }
        }
    }
}
