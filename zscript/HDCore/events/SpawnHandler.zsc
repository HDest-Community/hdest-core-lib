class HDCoreSpawnHandler : HDCoreStaticEventHandler {

    HDCoreDataProvider _trueProvider;

    HDCoreMapStatsHandler _mapStatsHandler;
    HDCoreGameStatsHandler _gameStatsHandler;

    // List of map names to completely ignore.
    Array<name> mapBlacklist;

    // List of persistent classes to completely ignore.
    Array<name> thingBlacklist;

    // List of all spawn tables.
    Array<HDCoreSpawnTable> spawnTables;

    protected void initProviders() {
        if (!_trueProvider) _trueProvider = HDCoreDataProvider.create('HDCoreStaticProvider', "true");
    }

    protected void initStatHandlers() {
        if (!_gameStatsHandler) _gameStatsHandler = HDCoreGameStatsHandler(EventHandler.find('HDCoreGameStatsHandler'));
        if (!_mapStatsHandler) _mapStatsHandler = HDCoreMapStatsHandler(EventHandler.find('HDCoreMapStatsHandler'));
    }

    override void beforeProcessCommands() {
        initProviders();
        initStatHandlers();

        mapBlacklist.clear();
        thingBlacklist.clear();
        spawnTables.clear();
    }

    override void processCommand(HDCoreCommand cmd) {

        switch (cmd.command) {
            case 'addSpawnHandlerThingBlacklist': {
                let name = cmd.getNameParam("name");

                if (name && thingBlacklist.find(name) == thingBlacklist.size()) thingBlacklist.push(name);
                break;
            }
            case 'addSpawnHandlerMapBlacklist': {
                let name = cmd.getNameParam("name");

                if (name && mapBlacklist.find(name) == mapBlacklist.size()) mapBlacklist.push(name);
                break;
            }
            case 'newSpawnTable': {
                let spawnName   = cmd.getParamValue("spawnName");
                let tableName   = cmd.hasParam("tableName") ? cmd.getParamValue("tableName") : spawnName;
                let replacement = cmd.getParamValue("replaces", _trueProvider);

                // If one already exists, quit.
                if (getSpawnTable(tableName.getNameValue(), replacement.getBoolValue())) break;

                // Create the new
                let table = HDCoreSpawnTable.create(spawnName, tableName, replacement);

                if (table) {
                    if (cmd.getBoolParam("addOriginalThing")) {
                        let entry = HDCoreSpawnTableSingleEntry.create(
                            spawnName,
                            cmd.getParamValue("enabled"),
                            cmd.getParamValue("weight"),
                            cmd.getParamValue("persists"),
                            cmd.getParamValue("chance"),
                            cmd.getParamValue("isFinal")
                        );

                        if (entry) table.addEntry(entry);
                    }

                    addSpawnTable(table);
                }
                break;
            }
            case 'addSpawnTableSingleEntry': {
                let entry = HDCoreSpawnTableSingleEntry.create(
                    cmd.getParamValue("name"),
                    cmd.getParamValue("enabled"),
                    cmd.getParamValue("weight"),
                    cmd.getParamValue("persists"),
                    cmd.getParamValue("chance"),
                    cmd.getParamValue("isFinal")
                );

                if (entry) addSpawnTableEntry(
                    cmd.getNameParam("tableName"),
                    entry,
                    cmd.getBoolParam("replaces", true)
                );
                break;
            }
            case 'addSpawnTableNestedEntry': {
                let nestedTable = getSpawnTable(
                    cmd.getNameParam("name"),
                    cmd.getBoolParam("replaces", true)
                );

                if (!nestedTable) {
                    nestedTable = HDCoreSpawnTable.create(
                        cmd.getParamValue("name"),
                        cmd.getParamValue("name"),
                        cmd.getParamValue("replaces")
                    );

                    if (nestedTable) addSpawnTable(nestedTable);
                }

                let entry = HDCoreSpawnTableNestedEntry.create(
                    nestedTable,
                    cmd.getParamValue("weight"),
                    cmd.getParamValue("enabled"),
                    cmd.getParamValue("persists"),
                    cmd.getParamValue("chance"),
                    cmd.getParamValue("isFinal")
                );

                if (entry) addSpawnTableEntry(
                    cmd.getNameParam("tableName"),
                    entry,
                    cmd.getBoolParam("replaces", true)
                );
                break;
            }
            case 'removeSpawnTableEntry': {
                let table = getSpawnTable(
                    cmd.getNameParam("tableName"),
                    cmd.getBoolParam("replaces", true)
                );

                if (table) table.removeEntry(cmd.getNameParam("name"));
                break;
            }
            case 'clearSpawnTable': {
                let table = getSpawnTable(
                    cmd.getNameParam("tableName"),
                    cmd.getBoolParam("replaces", true)
                );

                if (table) table.clearEntries();
                break;
            }
            case 'appendSpawnTableEntries': {
                let sourceTable = getSpawnTable(
                    cmd.getNameParam("sourceTableName"),
                    cmd.getBoolParam("replaces", true)
                );
                
                let destTable = getSpawnTable(
                    cmd.getNameParam("destTableName"),
                    cmd.getBoolParam("replaces", true)
                );

                if (sourceTable && destTable) destTable.addEntries(sourceTable._entries);
                break;
            }
            case 'setSpawnTableEntryWeight': {
                let table = getSpawnTable(
                    cmd.getNameParam("tableName"),
                    cmd.getBoolParam("replaces", true)
                );

                if (table) {
                    let entry = table.getEntry(cmd.getNameParam("name"));
                    let weight = cmd.getParamValue("weight");

                    if (entry && weight && weight._value != '') entry._weight = weight;
                }
                break;
            }
            case 'removeSpawnTable': {
                removeSpawnTable(
                    cmd.getNameParam("name"),
                    cmd.getBoolParam("replaces", true)
                );
                break;
            }
            case 'removeAllSpawnTables': {
                spawnTables.clear();
                break;
            }
            default:
                break;
        }
    }

    override void afterProcessCommands() {
        if (HDCore.ShouldLog('HDCoreLib.SpawnHandler', LOGGING_DEBUG)) {

            let msg = "Configured Spawn Tables:\n";
            
            forEach(table : spawnTables) msg = msg.." * "..table.toString().."\n";
            
            HDCore.Log('HDCoreLib.SpawnHandler', LOGGING_DEBUG, msg);
        }
    }

    HDCoreSpawnTable getSpawnTable(name name, bool replace = true) {
        forEach (table : spawnTables) if ((table.getTableName() == name || table.getSpawnName() == name) && table.isReplace() == replace) return table;

        return null;
    }

    void getSpawnTables(out Array<HDCoreSpawnTable> tables, name name, bool replace = true) {
        HDCore.Log('HDCoreLib.SpawnHandler', LOGGING_TRACE, "Getting all "..(replace ? "replacement" : "spawning").." tables for '"..name.."'...");
        
        forEach (table : spawnTables) {
            if ((table.getTableName() == name || table.getSpawnName() == name) && table.isReplace() == replace) {
                HDCore.Log('HDCoreLib.SpawnHandler', LOGGING_TRACE, "Adding '"..table.getTableName().."' table for "..table.getSpawnName().." to list of tables.");

                tables.push(table);
            }
        }
        
        if (HDCore.ShouldLog('HDCoreLib.SpawnHandler', LOGGING_TRACE)) {
            let msg = "Returning the following "..(replace ? "replacement" : "spawning").." tables:\n";

            forEach (table : tables) msg = msg.." * "..table.toString().."\n";

            HDCore.Log('HDCoreLib.SpawnHandler', LOGGING_TRACE, msg);
        }
    }

    // Appends the given Spawn Table with the handler, or registers it if it does not yet exist
    void addSpawnTable(HDCoreSpawnTable table) {

        if (HDCore.ShouldLog('HDCoreLib.SpawnHandler', LOGGING_DEBUG)) {

            let msg = "Adding "
                ..(table.isReplace() ? "Replacement" : "Spawning")
                .." Table for '"..table.getSpawnName().."' named '"..table.getTableName()
                .."':\n";

                if (table._entries.size()) forEach (entry : table._entries) msg = msg.." * "..entry.toString().."\n";

            HDCore.Log('HDCoreLib.SpawnHandler', LOGGING_DEBUG, msg);
        }

        // If we find an existing table, simply append the entries
        if (spawnTables.size()) {
            forEach (spawnTable : spawnTables) {
                if (table.equals(spawnTable)) {
                    spawnTable._entries.append(table._entries);

                    return;
                }
            }
        }

        // Otherwise, add the table to the registry.
        spawnTables.push(table);
    }

    void removeSpawnTable(name name, bool replace = true) {
        Array<HDCoreSpawnTable> tables;
        tables.clear();

        getSpawnTables(tables, name, replace);
        forEach (spawnTable : tables) spawnTables.delete(spawnTables.find(spawnTable));
    }

    // Add a new entry to an existing Spawn Table
    void addSpawnTableEntry(name name, HDCoreSpawnTableEntry entry, bool replace = true) {
        Array<HDCoreSpawnTable> tables;
        tables.clear();

        getSpawnTables(tables, name, replace);
        forEach (spawnTable : tables) {

            HDCore.Log('HDCoreLib.SpawnHandler', LOGGING_TRACE, "Adding "
                ..(entry.isPersistent() ? "" : "non-")
                .."persistent entry for '"..entry.getName().."' to the "
                ..(spawnTable.isReplace() ? "Replacement" : "Spawning")
                .." Table named '"..spawnTable.getTableName().."'"
            );

            spawnTable.addEntry(entry);
        }
    }

    // Tries to replace the thing during spawning.
    bool tryReplaceThing(ReplaceEvent e, HDCoreSpawnTable table) {

        let persistentOnly = Level.mapTime > 1;

        let entry = table.getRandomEntry(persistentOnly);

        if (entry) {
            initStatHandlers();

            let replacement = entry.getValue(persistentOnly);
    
            if (replacement != e.replacee) {
                HDCore.Log('HDCoreLib.SpawnHandler', LOGGING_DEBUG, e.replacee.getClassName().." -> "..replacement);
    
                e.replacement = replacement;
                e.isFinal = e.isFinal || entry.isFinal() || replacement == 'NullSpawner';

                // TODO: sendNetworkEvent to force play scope
                let key = entry.getName()..'.replace.success';
                if (_gameStatsHandler) _gameStatsHandler.setValue(key, (_gameStatsHandler.getValue(key).toInt(10) + 1).."");
                if (_mapStatsHandler) _mapStatsHandler.setValue(key, (_mapStatsHandler.getValue(key).toInt(10) + 1).."");
    
                return true;
            }

            // TODO: sendNetworkEvent to force play scope
            if (replacement == 'NullSpawner') {
                let key = entry.getName()..'.replace.fail';
                if (_gameStatsHandler) _gameStatsHandler.setValue(key, (_gameStatsHandler.getValue(key).toInt(10) + 1).."");
                if (_mapStatsHandler) _mapStatsHandler.setValue(key, (_mapStatsHandler.getValue(key).toInt(10) + 1).."");
            }
        }

        return false;
    }

    // Tries to create the thing via random spawning.
    bool tryCreateThing(Actor a, HDCoreSpawnTable table) {
        
        let persistentOnly = Level.mapTime > 1;

        let entry = table.getRandomEntry(persistentOnly);

        if (entry) {
            initStatHandlers();

            let value = entry.getValue(persistentOnly);

            if (HDCore.CheckClassExists(value) && value != a.getClassName() && value != 'NullSpawner') {
                HDCore.Log('HDCoreLib.SpawnHandler', LOGGING_DEBUG, a.getClassName().." + "..value);
    
                Actor.Spawn(value, a.pos, entry.isFinal() ? NO_REPLACE : ALLOW_REPLACE);

                // TODO: sendNetworkEvent to force play scope
                let key = entry.getName()..'.spawn.success';
                if (_gameStatsHandler) _gameStatsHandler.setValue(key, (_gameStatsHandler.getValue(key).toInt(10) + 1).."");
                if (_mapStatsHandler) _mapStatsHandler.setValue(key, (_mapStatsHandler.getValue(key).toInt(10) + 1).."");
    
                return true;
            }

            // TODO: sendNetworkEvent to force play scope
            if (value == 'NullSpawner') {
                let key = entry.getName()..'.spawn.fail';
                if (_gameStatsHandler) _gameStatsHandler.setValue(key, (_gameStatsHandler.getValue(key).toInt(10) + 1).."");
                if (_mapStatsHandler) _mapStatsHandler.setValue(key, (_mapStatsHandler.getValue(key).toInt(10) + 1).."");
            }
        }

        return false;
    }

    override void checkReplacee(ReplacedEvent e) {

        // Populates the main arrays if they haven't been already.
        if (!initialized) init();

        // If there's nothing replaced, quit.
        if (!e.replacement) return;
        
        // Attempt to get the default properties of the thing.
        // If that fails, quit.
        let defaults = getDefaultByType(e.replacement);
        if (!defaults) return;

        // If we're on MAP07 and the replacement is flagged as a Mancubus, return that class.
        name mapName = Level.MapName;
        switch (mapName) {
            case 'E1M8':
                if (defaults.bE1M8BOSS) e.replacee = 'BaronOfHell';
                break;
            case 'E2M8':
                if (defaults.bE2M8BOSS) e.replacee = 'Cyberdemon';
                break;
            case 'E3M8':
                if (defaults.bE3M8BOSS) e.replacee = 'SpiderMastermind';
                break;
            case 'E4M8':
                if (defaults.bE4M8BOSS) e.replacee = 'SpiderMastermind';
                break;
            case 'MAP07':
                if (defaults.bMAP07BOSS1) e.replacee = 'Fatso';
                else if (defaults.bMAP07BOSS2) e.replacee = 'Arachnotron';
                break;
            default:
                break;
        }
    }

    override void checkReplacement(ReplaceEvent e) {

        // Populates the main arrays if they haven't been already.
        if (!initialized) init();

        // If there's nothing to replace or if the replacement is final, quit.
        if (!e.replacee || e.isFinal) return;

        // If thing being replaced is blacklisted, quit.
        forEach (bl : thingBlacklist) if (e.replacee is bl) return;

        // If current map is blacklisted, quit.
        forEach (bl : mapBlacklist) if (Level.MapName == bl) return;

        handleSpawnReplacements(e);
    }

    override void worldThingSpawned(WorldEvent e) {

        // Populates the main arrays if they haven't been already.
        if (!initialized) init();

        // If thing spawned doesn't exist, quit.
        if (!e.thing) return;

        // If thing spawned is blacklisted, quit.
        forEach (bl : thingBlacklist) if (e.thing is bl) return;

        // If current map is blacklisted, quit.
        forEach (bl : mapBlacklist) if (Level.MapName == bl) return;

        handleSpawns(e.thing);
    }

    private void handleSpawnReplacements(ReplaceEvent e) {

        // Iterate through the list of replacement tables for the current thing
        Array<HDCoreSpawnTable> tables;
        tables.clear();

        getSpawnTables(tables, e.replacee.getClassName(), true);
        forEach (table : tables) {
            HDCore.Log('HDCoreLib.SpawnHandler', LOGGING_DEBUG, "Attempting to replace "..e.replacee.getClassName().." with entry in "..table.getTableName().."...");

            // If an entry in the table is selected and is replaced successfully, quit.
            if (tryReplaceThing(e, table)) return;
        }
    }

    private void handleSpawns(Actor thing) {

        // Iterate through the list of non-replacement tables for the current thing
        Array<HDCoreSpawnTable> tables;
        tables.clear();

        getSpawnTables(tables, thing.getClassName(), false);
        forEach (table : tables) {

            // if currently in pre-spawn or configured to be persistent,
            // and original thing being spawned is not an owned item,
            // and not configured to replace original spawn,
            // attempt to spawn new thing.
            let item = Inventory(thing);
            if (!(item && item.owner)) {
                HDCore.Log('HDCoreLib.SpawnHandler', LOGGING_DEBUG, "Attempting to spawn entry in "..table.getTableName().." along with "..thing.getClassName().."...");

                // If an entry in the table is selected and is spawned successfully, quit.
                if (tryCreateThing(thing, table)) return;
            }
        }
    }
}
