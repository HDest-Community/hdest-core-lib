class HDCoreStaticEventHandler : StaticEventHandler abstract {

    protected bool initialized;

    protected void init() {
        if (initialized) return;

        let cmdReader = HDCoreInfoReader(StaticEventHandler.find('HDCoreInfoReader'));

        if (shouldProcessCommands()) {
            beforeProcessCommands();
    
            processCommands(cmdReader.commands);
    
            afterProcessCommands();
        }

        initialized = true;
    }

    /**
     * Overrideable check to possibly ignore processing comnmands.
     * @returns {bool} If true, `HDCoreCommand`s will be processed.
     */
    virtual bool shouldProcessCommands() {
        return true;
    }

    /**
     * Lifecycle Hook to do any work before HDCoreCommands are processed.
     */
    virtual void beforeProcessCommands() {
        // no-op
    }

    /**
     * Overrideable check to possibly ignore processing the given comnmand.
     * @returns {bool} If true, the `HDCoreCommand` will be processed.
     */
    virtual bool shouldProcessCommand(HDCoreCommand cmd) {
        return cmd.getBoolParam("enabled", true);
    }

    /**
     * Lifecycle Hook to process HDCoreCommands.
     * By default commands are simply iterated through, and the enabled ones are processed.
     */
    virtual void processCommands(Array<HDCoreCommand> commands) {
        forEach(cmd : commands) if (shouldProcessCommand(cmd)) processCommand(cmd);
    }

    /**
     * Lifecycle Hook to do any work after HDCoreCommands are processed.
     */
    virtual void afterProcessCommands() {
        // no-op
    }

    /**
     * Lifecycle Hook to process a single HDCoreCommand.
     * To be implemented in downstream addons
     */
    virtual void processCommand(HDCoreCommand cmd) {
        // no-op
    }


    /**
     * Register Event
     * By default will run initialization if necessary.
     */
    override void onRegister() { init(); }

    /**
     * WorldThingDied Event
     */
    override void worldThingDied(WorldEvent e) {
        
        // If the thing that died is any HDest Mob and it hasn't dropped anything yet,
        // trigger our own lifecycle hook in case downstream addons wish to implement.
        if (e.thing is 'HDMobBase' && !HDMobBase(e.thing).bHASDROPPED) worldHDMobBaseDied(e);
    }

    /**
     * HDMobBaseDied Event
     * To be implemented in downstream addons
     */
    virtual void worldHDMobBaseDied(WorldEvent e) {
        // no-op
    }
}