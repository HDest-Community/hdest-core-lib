class HDCoreGameStatsHandler : HDCoreEventHandler {

    HDCoreGameStatsThinker t;

    Dictionary _stats;

    override void beforeProcessCommands() {
        _stats = Dictionary.create();

        if (!t) initThinker();
    }


    // ----------
    // PUBLIC API
    // ----------

    clearscope string getValue(name key) {
        HDCore.log('HDCoreLib.GameStatsHandler', LOGGING_TRACE, "Getting Game Stat '"..key.."'...");

        let ret = _stats ? _stats.at(key) : "";

        HDCore.log('HDCoreLib.GameStatsHandler', LOGGING_TRACE, "Value: "..ret);

        return ret;
    }

    clearscope string getValueOrDefault(name key, string defaultValue = "") {
        HDCore.log('HDCoreLib.GameStatsHandler', LOGGING_TRACE, "Getting Game Stat '"..key.."', or '"..defaultValue.."' if it doesn't...");

        let val = getValue(key);
        let ret = val ? val : defaultValue;

        HDCore.log('HDCoreLib.GameStatsHandler', LOGGING_TRACE, "Value: "..ret);

        return ret;
    }

    clearscope void setValue(name key, string value) {
        _stats.insert(key, value);
    }


    // ------
    // EVENTS
    // ------

    override void OnRegister() {
        HDCore.log('HDCoreLib.MapStatsHandler', LOGGING_TRACE, "Handler Registered...");

        super.OnRegister();

        SetOrder(-100);

        init();
    }

    override void WorldLoaded(WorldEvent e) {
        init();

        // If Stat Tracking is disabled, quit.
        if (!hdc_stat_trackers) return;

        HDCore.log('HDCoreLib.GameStatsHandler', LOGGING_TRACE, "World Loaded...");

        incrementLevelsStarted();
    }

    override void WorldTick() {
        if (GameAction == GA_SAVEGAME || GameAction == GA_AUTOSAVE) saveStats();
    }

    override void WorldThingSpawned(WorldEvent e) {
        init();

        // If Stat Tracking is disabled, quit.
        if (!hdc_stat_trackers) return;

        // If thing is invalid, quit.
        if (!e.thing || !(e.thing is 'Actor') || ((e.thing is 'Inventory') && Inventory(e.thing).owner)) return;

        HDCore.log('HDCoreLib.GameStatsHandler', LOGGING_TRACE, "Thing Spawned...");

        incrementThingsSpawned(e.thing.getClassName());
    }

    override void WorldThingDied(WorldEvent e) {
        // If Stat Tracking is disabled, quit.
        if (!hdc_stat_trackers) return;

        // If thing is invalid, quit.
        if (!e.thing || !(e.thing is 'Actor') || ((e.thing is 'Inventory') && Inventory(e.thing).owner)) return;

        HDCore.log('HDCoreLib.GameStatsHandler', LOGGING_TRACE, "Thing Died...");

        incrementThingsDied(e.thing.getClassName());
    }

    override void WorldUnloaded(WorldEvent e) {
        // If Stat Tracking is disabled, quit.
        if (!hdc_stat_trackers) return;

        HDCore.log('HDCoreLib.GameStatsHandler', LOGGING_TRACE, "World Unloaded...");

        incrementLevelsCompleted();

        saveStats();
    }


    // ------------
    // INTERNAL API
    // ------------

    protected void initThinker() {
        HDCore.log('HDCoreLib.GameStatsHandler', LOGGING_TRACE, "Getting GameStats Thinker...");

        if (!t) {
            t = HDCoreGameStatsThinker.get();
    
            loadStats();
        }

        HDCore.log('HDCoreLib.GameStatsHandler', LOGGING_TRACE, "Thinker: "..t);
    }

    protected void loadStats() {
        HDCore.log('HDCoreLib.GameStatsHandler', LOGGING_TRACE, "Loading GameStats...");

        let prevValue = _stats.toString();
        let currValue = t._stats.toString();

        _stats = Dictionary.fromString(currValue);

        HDCore.log('HDCoreLib.GameStatsHandler', LOGGING_TRACE, "GameStats Loaded: "..prevValue.." -> "..currValue);
    }

    protected void saveStats() {
        HDCore.log('HDCoreLib.GameStatsHandler', LOGGING_TRACE, "Saving GameStats...");

        let prevValue = t._stats.toString();
        let currValue = _stats.toString();
        
        t._stats = Dictionary.fromString(currValue);

        HDCore.log('HDCoreLib.GameStatsHandler', LOGGING_TRACE, "GameStats Saved: "..prevValue.." -> "..currValue);
    }

    protected void incrementLevelsStarted() {
        HDCore.log('HDCoreLib.GameStatsHandler', LOGGING_TRACE, "Incrementing Levels Started GameStat...");

        int prevValue = getValueOrDefault('levels.started', "0").toInt(10);
        int currValue = prevValue + 1;

        HDCore.log('HDCoreLib.GameStatsHandler', LOGGING_TRACE, "Levels Started: "..prevValue.." -> "..currValue);

        setValue('levels.started', currValue.."");
    }

    protected void incrementThingsSpawned(name name) {
        int prevValue = getValueOrDefault(name..'.spawned', "0").toInt(10);
        int currValue = prevValue + 1;

        HDCore.log('HDCoreLib.GameStatsHandler', LOGGING_TRACE, "Number of "..name.." Spawned: "..prevValue.." -> "..currValue);

        setValue(name..'.spawned', currValue.."");
    }

    protected void incrementThingsDied(name name) {
        int prevValue = getValueOrDefault(name..'.died', "0").toInt(10);
        int currValue = prevValue + 1;

        HDCore.log('HDCoreLib.GameStatsHandler', LOGGING_TRACE, "Number of "..name.." Died: "..prevValue.." -> "..currValue);

        setValue(name..'.died', currValue.."");
    }

    protected void incrementLevelsCompleted() {
        int prevValue = getValueOrDefault('levels.completed', "0").toInt(10);
        int currValue = prevValue + 1;

        HDCore.log('HDCoreLib.GameStatsHandler', LOGGING_TRACE, "Levels Completed: "..prevValue.." -> "..currValue);

        setValue('levels.completed', currValue.."");
    }
}