class HDCoreSectorSpawnerHandler : EventHandler {
    
    Array<Sector> hurtfloorSectors;
    Array<Sector> outdoorSectors;
    Array<Sector> secretSectors;

    Array<Sector> brightestSectors;
    Array<Sector> brighterSectors;
    Array<Sector> brightSectors;
    Array<Sector> darkSectors;
    Array<Sector> darkerSectors;
    Array<Sector> darkestSectors;

    override void OnRegister() {
        // Spawn Dummy Actors after everything else
        SetOrder(666);
    }

    override void WorldLoaded(WorldEvent e) {

        // TODO: Allow Sector-based Spawners to be toggled off

        // If we're re-opening the level, quit.
        if (e.IsReopen) return;

        // Collect all of the secret sectors in the level.
        BuildSectors();

        // For each outdoor sector, spawn dummy actors.
        foreach (s : outdoorSectors) SpawnDummySpawners(s, 'OutdoorSectorSpawner');

        // For each hurtfloor sector, spawn dummy actors.
        foreach (s : hurtfloorSectors) SpawnDummySpawners(s, 'HurtfloorSectorSpawner');

        // For each secret sector, spawn dummy actors.
        foreach (s : secretSectors) SpawnDummySpawners(s, 'SecretSectorSpawner');

        // For each sector, spawn dummy actors based on light level in sector.
        foreach (s : brightestSectors) SpawnDummySpawners(s, 'BrightestSectorSpawner');
        foreach (s : brighterSectors) SpawnDummySpawners(s, 'BrighterSectorSpawner');
        foreach (s : brightSectors) SpawnDummySpawners(s, 'BrightSectorSpawner');
        foreach (s : darkSectors) SpawnDummySpawners(s, 'DarkSectorSpawner');
        foreach (s : darkerSectors) SpawnDummySpawners(s, 'DarkerSectorSpawner');
        foreach (s : darkestSectors) SpawnDummySpawners(s, 'DarkestSectorSpawner');

        // Clean up after ourselves.
        Destroy();
    }

    private void BuildSectors() {
        hurtfloorSectors.clear();
        outdoorSectors.clear();
        secretSectors.clear();
        brightestSectors.clear();
        brighterSectors.clear();
        brightSectors.clear();
        darkSectors.clear();
        darkerSectors.clear();
        darkestSectors.clear();

        foreach (s : Level.sectors) {
            if (s.IsSecret()) secretSectors.Push(s);
            if (s.GetTexture(1) == skyflatnum) outdoorSectors.Push(s);
            if (s.damageAmount > 0) hurtfloorSectors.Push(s);

            // Divide all 65536 units of light level into 7 evenly spaced "regions" for spawning purposes
                 if (s.lightLevel > 56174) brightestSectors.Push(s); // 56175..65536 =  9362 units
            else if (s.lightLevel > 46812) brighterSectors.Push(s);  // 46813..56174 =  9362 units
            else if (s.lightLevel > 37450) brightSectors.Push(s);    // 37451..46812 =  9362 units
            else if (s.lightLevel > 28086) {}                        // 28087..37450 =  9364 units
            else if (s.lightLevel > 18724) darkSectors.Push(s);      // 18725..28086 =  9362 units
            else if (s.lightLevel >  9362) darkerSectors.Push(s);    //  9363..18724 =  9362 units
            else if (s.lightLevel >     0) darkestSectors.Push(s);   //     0..9362  =  9362 units
                                                                     //              = 65536 units
        }
    }

    private void SpawnDummySpawners(Sector s, name spawnerName)  {
        double area, circum, radius, avgSize;
        [area, circum, radius, avgSize] = HDCore.GetSectorSize(s);

        // Somewhere between 0 and 1/256th the sector size in square meters should be good for a sector
        // TODO: Allow reduction rate to be configurable
        int max = int(HDCore.getRandomInt(0, area, hdc_random_mode) / HDCONST_ONEMETRE) >> 8;
        int count = 0;
        for (let i = 0; i < max; i++) {
            double angle = HDCore.getRandomInt(1, 360, hdc_random_mode);
            double dist  = HDCore.getRandomDouble(0, radius, hdc_random_mode);
            vector3 pos  = (s.centerspot + (dist * cos(angle), dist * sin(angle)), s.floorplane.ZAtPoint(s.centerspot));

            if (Level.IsPointInLevel(pos) && Level.PointInSector(pos.xy) == s) {
                if (Actor.Spawn(spawnerName, pos, ALLOW_REPLACE)) count++;
            }
        }

        HDCore.Log('HDCoreLib.SectorSpawnHandler', LOGGING_DEBUG, "Spawned "..count.." out of "..max.." dummy actors.\n\t\tSector @"..s.centerspot.." area/circum/radius/avg is "..area.."/"..circum.."/"..radius.."/"..avgSize..".");
    }
} 