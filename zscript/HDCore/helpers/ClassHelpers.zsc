extend class HDCore {

    /**
     * Checks if the given ClassName exists as a class
     * @param {cls} cls The 'name' of the Class to check against
     * @returns {bool} true if the class whose name matches the given cls parameter exists,
     *   otherwise false.
     */
    static clearscope bool CheckClassExists(name cls) {
        let exists = (Class<Object>) (cls) != null;
        HDCore.log('HDCoreLib', LOGGING_TRACE, "checkClassExists(\""..cls.."\") => "..exists);
        return exists;
    }

    /**
     * Checks if the all of the given ClassNames exist as classes
     * @param {classes} classes The 'names' of the Classes to check against
     * @returns {bool} true if all of the classes whose names match the given classes parameter exist,
     *   otherwise false.
     */
    static clearscope bool CheckAllClassesExists(Array<name> classes) {
        HDCore.log('HDCoreLib', LOGGING_TRACE, "checkAllClassesExists(["..classes.."])...");

        let exists = true;
        forEach(cls : classes) {
            if (!CheckClassExists(cls)) {
                exists = false;
                break;
            }
        }

        HDCore.log('HDCoreLib', LOGGING_TRACE, "checkAllClassesExists(["..classes.."]) => "..exists);
        return exists;
    }

    /**
     * Checks if any of the given ClassNames exist as classes
     * @param {classes} classes The 'names' of the Classes to check against
     * @returns {bool} true if any of the classes whose names match the given classes parameter exist,
     *   otherwise false.
     */
    static clearscope bool CheckAnyClassesExists(Array<name> classes) {
        HDCore.log('HDCoreLib', LOGGING_TRACE, "checkAnyClassesExists(["..classes.."])...");

        let exists = false;
        forEach(cls : classes) {
            if (CheckClassExists(cls)) {
                exists = true;
                break;
            }
        }

        HDCore.log('HDCoreLib', LOGGING_TRACE, "checkAnyClassesExists(["..classes.."]) => "..exists);
        return exists;
    }

    /**
     * Checks if the given class extends off of the given parentClassName
     * @param {cls} cls The given class to check against
     * @param {parentCls} parentCls The name of the parent class to compare against
     * @param {allowSameCls} allowSameCls If true, allows the given class to be exactly equal to the parentClass
     * @param {allowAbstract} allowAbstract If true, allows the given class to be abstract
     * @returns {bool} true if cls extends off of parentCls, and is the same class when allowed, and is abstract when allowed
     */
    static clearscope bool IsChildClass(Class<Object> cls, name parentCls, bool allowSameCls = true, bool allowAbstract = false) {
        let isChild = cls is parentCls && (allowSameCls || cls != parentCls) && (allowAbstract || !cls.isAbstract());
        HDCore.log('HDCoreLib', LOGGING_TRACE, "isChildClass("..cls..", "..parentCls..", "..allowSameCls..", "..allowAbstract..") => "..isChild);
        return isChild;
    }


    /**
     * Checks if the given class extends off of and of the given parentClassNames
     * @param {cls} cls The given class to check against
     * @param {parentClasses} parentClasses The list of names of the parent classs to compare against
     * @param {allowSameCls} allowSameCls If true, allows the given class to be exactly equal to the parentClass
     * @param {allowAbstract} allowAbstract If true, allows the given class to be abstract
     * @returns {bool} true if cls extends off of any of the given parentClasses, and is the same class when allowed, and is abstract when allowed
     */
    static clearscope bool IsAnyChildClass(Class<Object> cls, Array<name> parentClasses, bool allowSameCls = true, bool allowAbstract = false) {
        HDCore.log('HDCoreLib', LOGGING_TRACE, "isAnyChildClass("..cls..", ["..parentClasses.."], "..allowSameCls..", "..allowAbstract..")...");

        let isChild = false;
        forEach (parentClass : parentClasses) {
            if (IsChildClass(cls, parentClass, allowSameCls, allowAbstract)) {
                isChild = true;
                break;
            };
        }

        HDCore.log('HDCoreLib', LOGGING_TRACE, "isAnyChildClass("..cls..", ["..parentClasses.."], "..allowSameCls..", "..allowAbstract..") => "..isChild);
        return isChild;
    }
}
