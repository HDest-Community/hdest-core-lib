class HDCoreGameStatsThinker : Thinker {

    Dictionary _stats;

    static HDCoreGameStatsThinker Get() {
        ThinkerIterator it = ThinkerIterator.Create('HDCoreGameStatsThinker', STAT_STATIC);

        // If the thinker finds one, return it
        HDCoreGameStatsThinker t = null;
        while (t = HDCoreGameStatsThinker(it.Next())) {
            HDCore.log('HDCoreLib.GameStatsThinker', LOGGING_DEBUG, "Thinker Found, stats: "..t._stats.toString());

            return t;
        }

        // Otherwise create a new one
        t = new('HDCoreGameStatsThinker');
        t.ChangeStatNum(STAT_STATIC);

        t._stats = Dictionary.create();
        
        HDCore.log('HDCoreLib.GameStatsThinker', LOGGING_DEBUG, "Thinker Created, stats: "..t._stats.toString());

        return t;
    }

    clearscope string getValue(name key) {
        HDCore.log('HDCoreLib.GameStatsThinker', LOGGING_TRACE, "Getting Game Stat '"..key.."'...");

        let ret = _stats.at(key);

        HDCore.log('HDCoreLib.GameStatsThinker', LOGGING_TRACE, "Value: "..ret);

        return ret;
    }

    clearscope string getValueOrDefault(name key, string defaultValue = "") {
        HDCore.log('HDCoreLib.GameStatsThinker', LOGGING_TRACE, "Getting Game Stat '"..key.."', or '"..defaultValue.."' if it doesn't...");

        let val = getValue(key);
        let ret = !!val ? val : defaultValue;

        HDCore.log('HDCoreLib.GameStatsThinker', LOGGING_TRACE, "Value: "..ret);

        return ret;
    }

    void setValue(name key, string value) {
        _stats.insert(key, value);
    }

    void removeValue(name key) {
        _stats.remove(key);
    }
}
