class HDCoreGlobalStatsThinker : Thinker {

    Dictionary stats;

    string statStr;

    static HDCoreGlobalStatsThinker Get() {
        ThinkerIterator it = ThinkerIterator.Create('HDCoreGlobalStatsThinker', STAT_STATIC);

        // If the thinker finds one, return it
        HDCoreGlobalStatsThinker t = null;
        while (t = HDCoreGlobalStatsThinker(it.Next())) {
            HDCore.log('HDCoreLib.GlobalStatsThinker', LOGGING_DEBUG, "Thinker Found, stats: "..t.statStr);

            return t;
        }

        // Otherwise create a new one
        t = new('HDCoreGlobalStatsThinker');
        t.ChangeStatNum(STAT_STATIC);

        if (t.statStr != "") {
            t.loadValues();
        } else {
            t.stats = Dictionary.create();
        }
        t.saveValues();
        
        HDCore.log('HDCoreLib.GlobalStatsThinker', LOGGING_DEBUG, "Thinker Created, stats: "..t.statStr);

        return t;
    }

    clearscope bool hasKey(name key) {
        HDCore.log('HDCoreLib.GlobalStatsThinker', LOGGING_TRACE, "Checking if Global Stat '"..key.."' Exists...");

        let ret = statStr.indexOf("\""..key.."\":") > -1;
        
        HDCore.log('HDCoreLib.GlobalStatsThinker', LOGGING_DEBUG, "Key: "..ret);

        return ret;
    }

    clearscope string getValue(name key) {
        HDCore.log('HDCoreLib.GlobalStatsThinker', LOGGING_TRACE, "Getting Global Stat '"..key.."'...");

        let ret = stats.at(key);

        HDCore.log('HDCoreLib.GlobalStatsThinker', LOGGING_DEBUG, "Value: "..ret);

        return ret;
    }

    clearscope string getValueOrDefault(name key, string defaultValue = "") {
        HDCore.log('HDCoreLib.GlobalStatsThinker', LOGGING_TRACE, "Getting Global Stat '"..key.."', or '"..defaultValue.."' if it doesn't...");

        let ret = hasKey(key) ? getValue(key) : defaultValue;

        HDCore.log('HDCoreLib.GlobalStatsThinker', LOGGING_DEBUG, "Value: "..ret);

        return ret;
    }

    void setValue(name key, string value) {
        stats.insert(key, value);
        saveValues();
    }

    void removeValue(name key) {
        stats.remove(key);
        saveValues();
    }

    void saveValues() {
        statStr = stats.toString();
    }

    void loadValues() {
        stats = Dictionary.fromString(statStr);
    }
}
