class HDCoreSpawnTable play {

    // Unique Name of the table.
    name tableName;

    // Name of thing to react to being spawned.
    name spawnName;

    // List of entries of things to spawn.
    Array<HDCoreSpawnTableEntry> entries;

    // Whether or not to use this table beyond initial map spawn.
    bool isPersistent;

    // Whether or not to replace the original thing or just spawn alongside it.
    bool replace;

    /**
     * Creates a spawn table for a given thing by name, as well as an optional unique table name,
     * whether the entries are considered after initial map spawn, and whether the table replaces the original thing.
     * @param {name} spawnName The className of the thing that might spawn.
     * @param {name} [tableName] An optional name to give the table, defaults to spawnName.
     * @param {bool} [persists=false] If true, the table will be considered even after the map has initially spawned all actors.
     * @param {bool} [replace=true] If true, the selected entry in the table will replace the original actor.
     * @returns {HDCoreSpawnTable} The newly created table.
     */
    static HDCoreSpawnTable create(name spawnName, name tableName = '', bool persists = false, bool replace = true) {
        HDCoreSpawnTable table = HDCoreSpawnTable(new('HDCoreSpawnTable'));

        table.tableName = tableName != '' ? tableName : spawnName;
        table.spawnName = spawnName;
        table.isPersistent = persists;
        table.replace = replace;

        table.clearEntries();

        return table;
    }

    bool equals(HDCoreSpawnTable other) {
        return (tableName == other.tableName || spawnName == other.spawnName) && isPersistent == other.isPersistent && replace == other.replace;
    }

    string toString() {

        let entriesStr = "[";

        foreach (entry : entries) entriesStr = entriesStr..", "..entry.toString();

        entriesStr = entriesStr.."]";

        return String.format(
            "{ tableName=%s, spawnName=%s, entries=%s, isPersistent=%i, replace=%i }",
               tableName,    spawnName,    entriesStr, isPersistent,    replace
        );
    }

    void addEntry(HDCoreSpawnTableEntry entry) {
        entries.push(entry);
    }

    void addEntries(Array<HDCoreSpawnTableEntry> arr) {
        entries.append(arr);
    }

    void removeEntry(name name) {
        HDCoreSpawnTableEntry tableEntry;

        foreach (entry : entries) if (entry.name == name) tableEntry = entry;

        entries.delete(entries.find(tableEntry));
    }

    void clearEntries() {
        entries.clear();
    }

    HDCoreSpawnTableEntry getEntry(name name) {
        HDCoreSpawnTableEntry tableEntry;

        foreach (entry : entries) if (entry.name == name) tableEntry = entry;

        return tableEntry;
    }

    HDCoreSpawnTableEntry getRandomEntry() {
        Array<int> weights;
        weights.clear();

        getWeights(weights);

        let entry = entries[HDCore.getWeightedRandom(weights)];

        if (entry is 'HDCoreSpawnTableNestedEntry') return HDCoreSpawnTableNestedEntry(entry)._table.getRandomEntry();

        return entry;
    }

    void getWeights(out Array<int> weights) {
        foreach (entry : entries) weights.push(entry.getWeight());
    }
}

class HDCoreSpawnTableEntry play abstract {

    // Name of entry.
    // Single Entries are named according to the thing they'll spawn,
    // whereas Nested Entries are named according to their table's name.
    name name;

    // The relative weight that this entry will spawn within the table
    int weight;

    // Getter to return the name of the thing to spawn for this entry
    abstract name getValue();

    // Getter to return the weight of this entry
    abstract int getWeight();

    // Helper method to easily write this entry to the console
    abstract string toString();
}

class HDCoreSpawnTableSingleEntry : HDCoreSpawnTableEntry {

    /**
     * Creates an entry for a given thing by name and its chances of spawning within the table.
     * @param {name} name The className of the thing that might spawn
     * @param {int} weight The relative weight/bias of the thing in the table.
     * @returns {HDCoreSpawnTableEntry} The newly created table entry.
     */
    static HDCoreSpawnTableEntry create(name name, int weight) {
        HDCoreSpawnTableSingleEntry entry = HDCoreSpawnTableSingleEntry(new('HDCoreSpawnTableSingleEntry'));

        entry.name   = name;
        entry.weight = weight;

        return entry;
    }

    override name getValue() {
        return name;
    }

    override int getWeight() {
        return weight;
    }

    override string toString() {
        return String.format(
            "{ name=%s, value=%s, weight=%i }",
               name,  getValue(), weight
        );
    }
}

class HDCoreSpawnTableNestedEntry : HDCoreSpawnTableEntry {

    HDCoreSpawnTable _table;

    /**
     * Creates an entry for a given thing by name and its chances of spawning within the table.
     * @param {isTable} isTable If true, the entry is actually a nested table
     * @param {name} name The className of the thing that might spawn
     * @param {int} weight The relative weight/bias of the thing in the table.
     * @returns {HDCoreSpawnTableEntry} The newly created table entry.
     */
    static HDCoreSpawnTableEntry create(HDCoreSpawnTable table, int weight = 0) {
        HDCoreSpawnTableNestedEntry entry = HDCoreSpawnTableNestedEntry(new('HDCoreSpawnTableNestedEntry'));

        entry._table = table;

        entry.name   = table.tableName;
        entry.weight = weight > 0 ? weight : entry.getWeight();

        return entry;
    }

    override name getValue() {
        let entry = _table.getRandomEntry();

        return entry.getValue();
    }

    override int getWeight() {
        let weight = 0;

        foreach (entry : _table.entries) weight += entry.getWeight();

        return weight;
    }

    override string toString() {
        return String.format(
            "{ name=%s, table=%s, weight=%i }",
               name, _table.toString(), getWeight()
        );
    }
}
