class HDCoreSpawnTable play {

    // Unique Name of the table.
    name tableName;

    // Name of thing to react to being spawned.
    name spawnName;

    // List of entries of things to spawn.
    Array<HDCoreSpawnTableEntry> _entries;

    // Whether or not to replace the original thing or just spawn alongside it.
    bool replace;

    /**
     * Creates a spawn table for a given thing by name, as well as an optional unique table name,
     * whether the entries are considered after initial map spawn, and whether the table replaces the original thing.
     * @param {name} spawnName The className of the thing that might spawn.
     * @param {name} [tableName] An optional name to give the table, defaults to spawnName.
     * @param {bool} [replace=true] If true, the selected entry in the table will replace the original actor.
     * @returns {HDCoreSpawnTable} The newly created table.
     */
    static HDCoreSpawnTable create(name spawnName, name tableName = '', bool replace = true) {
        HDCoreSpawnTable table = HDCoreSpawnTable(new('HDCoreSpawnTable'));

        table.tableName = tableName != '' ? tableName : spawnName;
        table.spawnName = spawnName;
        table.replace = replace;

        table.clearEntries();

        return table;
    }

    bool equals(HDCoreSpawnTable other) {
        return (tableName == other.tableName || spawnName == other.spawnName) && replace == other.replace;
    }

    string toString() {

        let entriesStr = "[";

        forEach (entry : _entries) entriesStr = entriesStr..", "..entry.toString();

        entriesStr = entriesStr.."]";

        return String.format(
            "{ tableName=%s, spawnName=%s, entries=%s, replace=%i }",
               tableName,    spawnName,    entriesStr, replace
        );
    }

    void addEntry(HDCoreSpawnTableEntry entry) {
        _entries.push(entry);
    }

    void addEntries(Array<HDCoreSpawnTableEntry> arr) {
        _entries.append(arr);
    }

    void removeEntry(name name) {
        HDCoreSpawnTableEntry tableEntry;

        forEach (entry : _entries) {
            if (entry.name == name) {
                tableEntry = entry;
                break;
            }
        }

        _entries.delete(_entries.find(tableEntry));
    }

    void clearEntries() {
        _entries.clear();
    }

    HDCoreSpawnTableEntry getEntry(name name, bool persistentOnly = false) {
        forEach (entry : _entries) if (entry.name == name && (!persistentOnly || entry.isPersistent)) return entry;

        return null;
    }

    void getEntries(out Array<HDCoreSpawnTableEntry> arr, bool persistentOnly = false) {
        arr.clear();

        forEach (entry : _entries) {

            // Filter out persistence-related entries
            if (!persistentOnly || entry.isPersistent) {

                // If weight is negative, treat as only possible outcome (replace all)
                if (entry.getWeight(persistentOnly) < 0.0) {
                    arr.clear();
                    arr.push(entry);
                    return;
                }
    
                // Otherwise, as long as we have a valid weight, add it to array
                if (!HDGMGlobalMaths.nearZero(entry.getWeight(persistentOnly))) {
                    arr.push(entry);
                }
            }
        }
    }

    HDCoreSpawnTableEntry getRandomEntry(bool persistentOnly = false) {
        Array<HDCoreSpawnTableEntry> entries;
        entries.clear();

        getEntries(entries, persistentOnly);

        Array<double> weights;
        weights.clear();

        getWeights(weights, entries, persistentOnly);

        if (hd_debug) {
            Console.printF(tableName.." Entries:");
            forEach (entry : entries) Console.printF(" * "..entry.name.." ["..entry.getWeight().."]");
        }

        HDCoreSpawnTableEntry entry;

        if (entries.size() > 1) {
            entry = entries[HDCore.getWeightedRandom(weights)];
        } else if (entries.size() > 0) {
            entry = entries[0];
        }
        
        if (hd_debug) Console.printF("Selected Entry: "..(entry ? entry.name.."" : "Nothing"));

        return (entry is 'HDCoreSpawnTableNestedEntry')
            ? HDCoreSpawnTableNestedEntry(entry)._table.getRandomEntry(persistentOnly)
            : entry;
    }

    void getWeights(out Array<double> weights, Array<HDCoreSpawnTableEntry> entries, bool persistentOnly = false) {
        weights.clear();

        forEach (entry : entries) weights.push(entry.getWeight(persistentOnly));
    }
}

class HDCoreSpawnTableEntry play abstract {

    // Name of entry.
    // Single Entries are named according to the thing they'll spawn,
    // whereas Nested Entries are named according to their table's name.
    name name;

    // The relative weight that this entry will spawn within the table
    double weight;

    // Whether or not to use this table beyond initial map spawn.
    bool isPersistent;

    // Chance out of 256 that the thing being spawned will succeed, otherwise nothing will spawn in its place.
    int chance;

    // Getter to return the name of the thing to spawn for this entry
    abstract name getValue(bool persistentOnly = false);

    // Getter to return the weight of this entry
    abstract double getWeight(bool persistentOnly = false);

    // Getter to return the relevant list of entries for this 
    abstract void getEntries(out Array<HDCoreSpawnTableEntry> entries, bool persistentOnly = false);

    // Helper method to easily write this entry to the console
    abstract string toString();
}

class HDCoreSpawnTableSingleEntry : HDCoreSpawnTableEntry {

    /**
     * Creates an entry for a given thing by name and its chances of spawning within the table.
     * @param {name} name The className of the thing that might spawn
     * @param {double} weight The relative weight/bias of the thing in the table.
     * @param {int}  [chance=256] chance out of 256 that the thing being spawned will actually spawn.
     * @returns {HDCoreSpawnTableEntry} The newly created table entry.
     */
    static HDCoreSpawnTableEntry create(name name, double weight = 1.0, bool persists = false, int chance = 256) {
        HDCoreSpawnTableSingleEntry entry = HDCoreSpawnTableSingleEntry(new('HDCoreSpawnTableSingleEntry'));

        entry.name         = name;
        entry.weight       = weight;
        entry.isPersistent = persists;
        entry.chance       = chance;

        return entry;
    }

    override name getValue() {

        // If a random value (0-255) falls below the success chance, return what's in the entry.
        // Otherwise return a "nothing" dummy spawner to simulate a RandomSpawner picking and failing to drop a thing.
        return random() < chance ? name : 'NullSpawner';
    }

    override double getWeight() {
        return weight;
    }

    override void getEntries(out Array<HDCoreSpawnTableEntry> entries) {
        // no-op
    }

    override string toString() {
        return String.format(
            "{ name=%s, weight=%.3f, isPersistent=%i, chance=%i }",
               name,    weight,      isPersistent,    chance
        );
    }
}

class HDCoreSpawnTableNestedEntry : HDCoreSpawnTableEntry {

    HDCoreSpawnTable _table;

    /**
     * Creates an entry for a given thing by name and its chances of spawning within the table.
     * @param {isTable} isTable If true, the entry is actually a nested table
     * @param {name} name The className of the thing that might spawn
     * @param {double} weight The relative weight/bias of the thing in the table.
     * @param {int}  [chance=256] chance out of 256 that the thing being spawned will actually spawn.
     * @returns {HDCoreSpawnTableEntry} The newly created table entry.
     */
    static HDCoreSpawnTableEntry create(HDCoreSpawnTable table, double weight = -1.0, bool persists = false, int chance = 256) {
        HDCoreSpawnTableNestedEntry entry = HDCoreSpawnTableNestedEntry(new('HDCoreSpawnTableNestedEntry'));

        entry._table = table;

        entry.name         = table.tableName;
        entry.weight       = weight >= 0.0 ? weight : entry.getWeight();
        entry.isPersistent = persists;
        entry.chance       = chance;

        return entry;
    }

    override name getValue(bool persistentOnly) {
        let entry = _table.getRandomEntry(persistentOnly);

        // If a random value (0-255) falls below the success chance, return what's in the entry.
        // Otherwise return a "nothing" dummy spawner to simulate a RandomSpawner picking and failing to drop a thing.
        return random() < entry.chance ? entry.getValue() : 'NullSpawner';
    }

    override double getWeight(bool persistentOnly) {
        let weight = 0.0;

        Array<HDCoreSpawnTableEntry> entries;
        entries.clear();

        getEntries(entries, persistentOnly);

        forEach (entry : entries) weight += entry.getWeight(persistentOnly);

        return weight;
    }

    override void getEntries(out Array<HDCoreSpawnTableEntry> entries, bool persistentOnly) {
        _table.getEntries(entries, persistentOnly);
    }

    override string toString() {
        return String.format(
            "{ name=%s, table=%s, weight=%.3, isPersistent=%i, chance=%i }",
               name, _table.toString(), getWeight(), isPersistent, chance
        );
    }
}
