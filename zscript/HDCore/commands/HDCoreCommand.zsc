class HDCoreCommandParam abstract {

    string paramName;

    string value;

    static HDCoreCommandParam create(name paramCls, name paramName, string value = "") {
        HDCore.log('HDCoreLib', LOGGING_TRACE, "Creating new "..paramCls.." instance, paramName="..paramName..", value="..value);

        let param = HDCoreCommandParam(new(paramCls));

        if (param) {
            param.paramName = paramName;

            // If we're building a nested functional param,
            // Filter out irrelevant params
            if (param is 'HDCoreCommandFunctionParam') {
                HDCore.log('HDCoreLib', LOGGING_TRACE, "Filtering out irrelevant parameters...");

                Dictionary oldDict = Dictionary.fromString(value);
                let i = DictionaryIterator.create(oldDict);
                
                let newDict = Dictionary.create();
                while (i.next()) {
                    let key = i.key();
                    let val = i.value();
                    
                    HDCore.log('HDCoreLib', LOGGING_TRACE, "Key="..key..", value="..val..", paramName="..paramName..", Keep? "..(key.left((paramName..".").length()) ~== paramName.."."));

                    if (key.left((paramName..".").length()) ~== paramName..".") newDict.insert(key, val);
                }

                value = newDict.toString();
            }

            param.setParam(value);
        }

        return param;
    }

    virtual void setParam(string newVal = "") {
        HDCore.log('HDCoreLib', LOGGING_TRACE, "Setting "..paramName.." value from "..value.." to "..newVal);

        value = newVal;
    }

    virtual string toString() {
        return String.format(
            "{ \"%s\": \"%s\" }",
              paramName, value
        );
    }

    abstract string getStringValue();

    abstract name getNameValue();

    abstract int getIntValue();

    abstract double getDoubleValue();

    abstract bool getBoolValue();

}

class HDCoreCommand {
    name command;

    Map<name, HDCoreCommandParam> params;

    static HDCoreCommand create(name command, string paramsStr = "") {
        let cmd = HDCoreCommand(new('HDCoreCommand'));

        if (cmd) {
            cmd.command = command;
            cmd.params.clear();

            parseParams(cmd.params, paramsStr);
        }

        return cmd;
    }

    static void parseParams(out Map<name, HDCoreCommandParam> paramsMap, string paramsStr = "") {
        if (paramsStr.length() > 0) {

            let dict = Dictionary.fromString(paramsStr);
            let i = DictionaryIterator.create(dict);

            while (i.next()) {
                name paramName = '';
                let key = i.key();
                let val = i.value();

                if (val.indexOf("$") == 0) {
                    paramName = 'HDCoreCommandLocalizedParam';
                    val = val.mid(1);
                } else if (val.indexOf("#") == 0) {
                    paramName = 'HDCoreCommandCVarParam';
                    val = val.mid(1);
                } else if (val.indexOf("@") == 0) {
                    let paramsStart = val.indexOf("(");
                    // let paramsEnd   = val.rightIndexOf(")");

                    paramName = 'HDCoreCommandFunctionParam_'..val.mid(1, paramsStart - 1);
                    // val = val.mid(paramsStart + 1, paramsEnd - paramsStart - 1);
                    val = paramsStr;
                } else {
                    paramName = 'HDCoreCommandStaticParam';
                }

                // If the specific Command Param Class doesn't exist, quit.
                // This is mainly for custom Function Params,
                // but may be useful in the future
                if (!HDCore.checkClassExists(paramName)) return;

                let param = HDCoreCommandParam.create(paramName, key, val);

                if (param) {
                    paramsMap.insert(key, param);
                }
            }
        }
    }

    bool hasParam(string key) {
        let v = params.checkKey(key);
        HDCore.log("HDCoreLib."..GetClassName().."."..command, LOGGING_TRACE, "hasParam(\""..key.."\") => "..v);
        return v;
    }

    HDCoreCommandParam getParam(string key) {
        let v = HDCoreCommandParam(params.getIfExists(key));
        HDCore.log("HDCoreLib."..GetClassName().."."..command, LOGGING_TRACE, "getParam(\""..key.."\") => "..v);
        return v;
    }

    string getStringParam(string key, string defaultValue = "") {
        let v = hasParam(key) ? getParam(key).getStringValue() : defaultValue;
        HDCore.log("HDCoreLib."..GetClassName().."."..command, LOGGING_TRACE, "getStringParam(\""..key.."\", \""..defaultValue.."\") => "..v);
        return v;
    }

    name getNameParam(string key, name defaultValue = '') {
        let v = hasParam(key) ? getParam(key).getNameValue() : defaultValue;
        HDCore.log("HDCoreLib."..GetClassName().."."..command, LOGGING_TRACE, "getNameParam(\""..key.."\", \""..defaultValue.."\") => "..v);
        return v;
    }

    int getIntParam(string key, int defaultValue = 0) {
        let v = hasParam(key) ? getParam(key).getIntValue() : defaultValue;
        HDCore.log("HDCoreLib."..GetClassName().."."..command, LOGGING_TRACE, "getIntParam(\""..key.."\", \""..defaultValue.."\") => "..v);
        return v;
    }

    double getDoubleParam(string key, double defaultValue = 0.0) {
        let v = hasParam(key) ? getParam(key).getDoubleValue() : defaultValue;
        HDCore.log("HDCoreLib."..GetClassName().."."..command, LOGGING_TRACE, "getDoubleParam(\""..key.."\", \""..defaultValue.."\") => "..v);
        return v;
    }

    bool getBoolParam(string key, bool defaultValue = false) {
        let v = hasParam(key) ? getParam(key).getBoolValue() : defaultValue;
        HDCore.log("HDCoreLib."..GetClassName().."."..command, LOGGING_TRACE, "getBoolParam(\""..key.."\", \""..defaultValue.."\") => "..v);
        return v;
    }

    bool equals(HDCoreCommand other) {
        HDCore.log("HDCoreLib."..GetClassName().."."..command, LOGGING_TRACE, "equals(\""..other.toString().."\")...");

        // First check if the command and size of params are equal
        let isEqual = command == other.command && params.countUsed() == other.params.countUsed();

        // If they are, check if each param matches the other, and quit early if they are not
        if (isEqual) forEach(k, v : params) if (!other.params.checkKey(k) || other.params.getIfExists(k) != v) return false;

        HDCore.log("HDCoreLib."..GetClassName().."."..command, LOGGING_TRACE, "equals(\""..other.toString().."\") => "..isEqual);

        return isEqual;
    }

    string toString() {
        let paramStr = "(";

        forEach (k, v : params) paramStr = paramStr.."\""..k.."\": "..HDCoreCommandParam(v).getStringValue()..", ";

        paramStr = paramStr..")";

        return String.format(
            "{ \"command\": \"%s\", \"params\": \"%s\" }",
                 command,             paramStr
        );
    }
}

