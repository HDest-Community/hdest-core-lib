extend class HDCore {

    static void getHDCoreInfoCommands(out Array<HDCoreCommand> arr) {
        
        // Initialize a temp array of raw command strings
        Array<string> cmds;
        cmds.clear();

        // Read the HDCINFO lumps into the temp list of raw commands
        readHDCoreInfo(cmds);

        // Parse the HDCore Lumps into the cache of commands
        parseHDCoreInfo(cmds, arr);
    }
    
    static void readHDCoreInfo(out Array<string> arr) {
        string rawLumpText;
        int lumpNum;

        while ((lumpNum = Wads.findLump("HDCINFO", lumpNum + 1, Wads.GlobalNamespace)) >= 0) {
            Array<string> lumplines;
            lumplines.Clear();

            rawLumpText = Wads.readLump(lumpNum);
            rawLumpText.split(lumplines, "\n", TOK_KEEPEMPTY);

            forEach (line : lumplines) {

                // Remove comments
                int commentIdx = line.indexOf("//");
                if (commentIdx == 0) {
                    line = "";
                } else if (commentIdx > 0) {
                    line = line.left(commentIdx);
                }

                // Remove newline and return characters
                line.replace("\r", "");
                line.replace("\n", "");
                line.replace("\f", ""); // Is this correct or even needed?

                // Trim remaining whitespaces on both ends
                line.stripLeftRight();

                // Set back to lump
                if (line.length() > 0) arr.Push(line);
            }
        }
        
        if (hd_debug) {
            console.printf('Read HDCINFO Lumps!  Read '..arr.size()..' Lines!');

            for (int i = 0; i < arr.size(); i++) console.printf(i.." "..arr[i]);
        }
    }

    static void parseHDCoreInfo(Array<string> input, out Array<HDCoreCommand> output) {
        output.clear();

        Array<string> tokens;
        
        forEach(line : input) {
            tokens.clear();

            line.split(tokens, "=>");

            if (tokens.size() > 1) {
                tokens[0].stripLeftRight();
                tokens[1].stripLeftRight();

                output.push(HDCoreCommand.create(tokens[0], tokens[1]));
            } else if (tokens.size()) {
                tokens[0].stripLeftRight();

                output.push(HDCoreCommand.create(tokens[0]));
            }
        }
    }
}
