class HDCoreInfoReader : StaticEventHandler {

    Array<HDCoreCommand> commands;

    override void onRegister() {

        // This should go absolutely first, to initialize all possible commands
        setOrder(int.min);

        // Initialize a temp array of raw command strings
        Array<string> cmds;
        cmds.clear();

        // Initialize Commands Array
        commands.clear();

        // Read the HDCINFO lumps into the temp list of raw commands
        readHDCoreInfo(cmds);

        // Parse the HDCore Lumps into the cache of commands
        parseHDCoreInfo(cmds, commands);

        if (HDCore.ShouldLog('HDCoreLib', LOGGING_DEBUG)) {

            let msg = "Parsed HDCoreCommands:\n";

            forEach(cmd : commands) msg = msg..cmd.toString().."\n";
            
            HDCore.Log('HDCoreLib', LOGGING_DEBUG, msg);
        }
    }

    // static void getHDCoreInfoCommands(out Array<HDCoreCommand> arr, out Array<name> cmdNames) {
        
    //     // Initialize a temp array of raw command strings
    //     Array<string> arr;
    //     arr.clear();

    //     let cmdReader = HDCoreInfoReader(StaticEventHandler.find('HDCoreInfoReader'));

    //     // Return the commands filtered by the given list, if any
    //     forEach (cmd : cmdReader.commands) if (cmdNames.size() < 1 || cmdNames.indexOf(cmd) < cmdNames.size()) arr.push(cmd);
    // }
    
    private void readHDCoreInfo(out Array<string> arr) {
        string rawLumpText;
        int lumpNum;

        while ((lumpNum = Wads.findLump("HDCINFO", lumpNum + 1, Wads.GlobalNamespace)) >= 0) {
            Array<string> lumplines;
            lumplines.Clear();

            rawLumpText = Wads.readLump(lumpNum);
            rawLumpText.split(lumplines, "\n", TOK_KEEPEMPTY);

            forEach (line : lumplines) {

                // Remove comments
                int commentIdx = line.indexOf("//");
                if (commentIdx == 0) continue;
                else if (commentIdx > 0) line = line.left(commentIdx);

                // Remove newline and return characters
                line.replace("\r", "");
                line.replace("\n", "");
                line.replace("\f", ""); // Is this correct or even needed?

                // Trim remaining whitespaces on both ends
                line.stripLeftRight();

                // Set back to lump
                if (line.length() > 0) arr.Push(line);
            }
        }
        
        if (HDCore.ShouldLog('HDCoreLib', LOGGING_DEBUG)) {
            let msg = "Read HDCINFO Lumps!  Read "..arr.size().." Lines!\n";
            
            for (int i = 0; i < arr.size(); i++) msg = msg..i.." "..arr[i].."\n";

            HDCore.Log('HDCoreLib', LOGGING_DEBUG, msg);
        }
    }

    private void parseHDCoreInfo(Array<string> input, out Array<HDCoreCommand> output) {
        output.clear();

        Array<string> tokens;
        
        forEach(line : input) {
            tokens.clear();

            line.split(tokens, "=>");

            if (tokens.size() > 1) {
                tokens[0].stripLeftRight();
                tokens[1].stripLeftRight();

                output.push(HDCoreCommand.create(tokens[0], tokens[1]));
            } else if (tokens.size()) {
                tokens[0].stripLeftRight();

                output.push(HDCoreCommand.create(tokens[0]));
            }
        }
    }
}
